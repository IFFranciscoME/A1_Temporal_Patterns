resultado_3 <- f3_hxn(x=2, n=2)
resultado_3
sum((x:n)^2)
sum((x:2)^2)
1 + sum((x:2)^2)
1 + sum(x^2)
f3_hxn <- function(x, n){
S <- 1 + sum(x^2)
return(S)
}
resultado_3 <- f3_hxn(x=2, n=2)
resultado_3
1 + sum(x^2)
1 + sum(x^2)
1 + sum(x^2)
f3_hxn <- function(x, n){
S <- 1 + sum(x^2)
return(S)
}
resultado_3 <- f3_hxn(x=2, n=2)
resultado_3
f3_hxn <- function(x, n){
S <- 1 + sum(x^n)
return(S)
}
resultado_3 <- f3_hxn(x=2, n=2)
resultado_3
f3_hxn <- function(x, n){
S <- 1 + sum(x^1:n)
return(S)
}
resultado_3 <- f3_hxn(x=2, n=2)
resultado_3
f3_hxn <- function(x, n){
S <- 1 + sum(x^(1:n))
return(S)
}
resultado_3 <- f3_hxn(x=2, n=2)
resultado_3
install.packages("siebanxicor")
install.packages("httr")
install.packages("libcurl")
install.packages("siebanxicor")
install.packages("libcurl")
install.packages("siebanxicor")
setToken("bbba1fa9bd99979382cfcabf3ed1164970337e377d8ae00fd9156ac0ab1c25cb")
library("siebanxicor")
# bbba1fa9bd99979382cfcabf3ed1164970337e377d8ae00fd9156ac0ab1c25cb
setToken("bbba1fa9bd99979382cfcabf3ed1164970337e377d8ae00fd9156ac0ab1c25cb")
idSeries <- "SF46407"
series <- getSeriesData(idSeries, '2016-01-01','2018-07-12')
View(series)
series
idSeries <- "SR16487"
series <- getSeriesData(idSeries, '2016-01-01','2018-07-12')
series
series$date[0]
series$date[1]
series$date
series$Date
series
series$SR16487$date
series$SR16487$date[0]
series$SR16487$date[1]
class(series$SR16487$date[1])
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr","jsonlite","lubridate",
"lattice","moments","matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
install.packages("RCurl")
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr","jsonlite","lubridate",
"lattice","moments","matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
install.packages("tseries")
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr","jsonlite","lubridate",
"lattice","moments","matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr","rjson", "jsonlite","lubridate",
"lattice","moments","matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
install.packages("rjson")
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr","rjson", "jsonlite","lubridate",
"lattice","moments","matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
json_data <- fromJSON(paste(readLines('datos/resultados.json'), collapse=""))
json_data <- fromJSON('datos/resultados.json', collapse=""))
json_data <- fromJSON('datos/resultados.json', collapse="")
json_data <- fromJSON('datos/resultados.json')
json_data <- fromJSON(file='datos/resultados.json')
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr", "jsonlite","lubridate",
"lattice","moments","matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
json_data <- fromJSON(file='datos/resultados.json', flatten=TRUE)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr", "jsonlite","lubridate",
"lattice","moments","matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
json_data <- fromJSON(file='datos/resultados.json', flatten=TRUE)
json_data <- fromJSON('datos/resultados.json', flatten=TRUE)
json_data <- jsonlite::fromJSON('datos/resultados.json', flatten=TRUE)
json_data$
json_data['ciclo_4']
class(json_data)
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE)
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=FALSE)
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', method='C')
json_data <- rjson::fromJSON(txt='datos/resultados.json', method='C')
json_data <- rjson::fromJSON('datos/resultados.json', method='C')
json_data <- rjson::fromJSON('datos/resultados.json', method='D')
json_data <- rjson::fromJSON('datos/resultados.json', method='R')
json_data <- rjson::fromJSON('datos/resultados.json')
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE)
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE)
json_data = sub('^[^\\{]*\\{', '{', json_data)
json_data
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE)
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE)
json_data = sub('\\', '', json_data)
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE)
json_data = sub("\\\ ", " ", json_data)
json_data
t_tabla_1.ToJSON
ToJSON(t_tabla_1)
rjsonio::ToJSON(t_tabla_1)
rjson::toJSON(t_tabla_1)
rjson::toJSON(json_data)
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE, simplifyVector = TRUE)
json_data <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE)
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE, simplifyVector = True)
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=TRUE, simplifyVector = TRUE)
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json', flatten=F, simplifyVector = TRUE)
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=F, simplifyVector = TRUE,
dataframe='columns')
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=F, simplifyVector = TRUE,
dataframe='col')
cat(toJSON(json_data_2, pretty=TRUE))
print(toJSON(json_data_2, pretty=TRUE))
print(toJSON(json_data_2))
cat(toJSON(json_data_1, pretty=TRUE))
cat(toJSON(json_data_1))
cat(jsonlite::toJSON(json_data_1, pretty=TRUE))
jsonlite::read_json(json_data_1)
jsonlite::parse_json(json_data_1)
parsed <- jsonlite::parse_json(json_data_1)
parsed$ciclo_4
class(parsed$ciclo_4)
parsed$ciclo_4[0]
parsed$ciclo_4[1]
parsed$ciclo_4[1][1]$
parsed$ciclo_4[1]$datos
class(parsed$ciclo_4[1])
class(parsed$ciclo_4[1][1])
class(parsed$ciclo_4[1][1][1])
class(parsed$ciclo_4[1][1][1][1])
class(parsed$ciclo_4[1][1][1][1][1])
class(parsed$ciclo_4[1][1][1][1])
parsed$ciclo_4[1][1][1][1]
parsed$ciclo_4[1][1][1][1]
parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p
parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[0]
parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1]
parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[2]
parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1]
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1]) %>% as.data.frame
View(df)
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=F, simplifyVector = FALSE,
dataframe='col')
# datos['ciclo_4'][0]['datos']['RedboodexMoM_USA_A_2018-05-30_12:55:00']['df_serie_p']
parsed <- jsonlite::parse_json(json_data_1)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1]) %>% as.data.frame
df
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=F, simplifyVector = FALSE)
# datos['ciclo_4'][0]['datos']['RedboodexMoM_USA_A_2018-05-30_12:55:00']['df_serie_p']
parsed <- jsonlite::parse_json(json_data_1)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1]) %>% as.data.frame
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=F, simplifyVector = FALSE)
# datos['ciclo_4'][0]['datos']['RedboodexMoM_USA_A_2018-05-30_12:55:00']['df_serie_p']
parsed <- jsonlite::parse_json(json_data_1)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1]) %>% as.data.frame
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=T, simplifyVector = FALSE)
# datos['ciclo_4'][0]['datos']['RedboodexMoM_USA_A_2018-05-30_12:55:00']['df_serie_p']
parsed <- jsonlite::parse_json(json_data_1)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1]) %>% as.data.frame
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=T, simplifyVector = FALSE)
# datos['ciclo_4'][0]['datos']['RedboodexMoM_USA_A_2018-05-30_12:55:00']['df_serie_p']
parsed <- jsonlite::parse_json(json_data_1)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1]) %>% as.data.frame
#
df <- jsonlite::read_json(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
#
df <- as.data.frame(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
as.data.frame(df)
d = as.data.frame(df)
View(d)
d = data.frame(df)
df$close[0]
df$close[1]
df$close[2]
df$close[3]
df <- data.frame(matrix(unlist(df), nrow=31, byrow=T),stringsAsFactors=FALSE)
View(df)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_convertido <- data.frame(matrix(unlist(df), nrow=31, byrow=T),stringsAsFactors=FALSE)
df$close[1]
df_convertido$close[1]
df_convertido$close[2]
df_convertido$x[1]
df_convertido$X1[1]
test.data[] <- lapply(df_convertido, function(x) if(is.integer(x)) as.numeric(x) else x)
df_convertido[] <- lapply(df_convertido, function(x) if(is.integer(x)) as.numeric(x) else x)
View(df_convertido)
df_convertido$X1[1]
class(df_convertido$X1[1])
df$close[1]
df_convertido[] <- lapply(df_convertido, function(x) round(x, 4) )
View(df_convertido)
df_convertido[] <- lapply(df_convertido, function(x) round(x, 2) )
View(df_convertido)
df_convertido[] <- lapply(df_convertido, function(x) if(is.float(x)) as.numeric(x) else x)
df_convertido$X1[1]
is.float(df_convertido$X1[1])
is.float32(df_convertido$X1[1])
is.float64(df_convertido$X1[1])
df_convertido[is.num] <- lapply(df_convertido[is.num], round, 8)
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=T, simplifyVector = FALSE)
# datos['ciclo_4'][0]['datos']['RedboodexMoM_USA_A_2018-05-30_12:55:00']['df_serie_p']
parsed <- jsonlite::parse_json(json_data_1)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_convertido <- data.frame(matrix(unlist(df), nrow=31, byrow=T),stringsAsFactors=FALSE)
df_convertido[is.num] <- lapply(df_convertido[is.num], round, 8)
df_convertido[is.numeric()] <- lapply(df_convertido[is.numeric()], round, 8)
df_convertido[is.numeric] <- lapply(df_convertido[is.numeric], round, 8)
is.num <- sapply(DF, is.numeric)
df_convertido[is.num] <- lapply(df_convertido[is.num], round, 8)
is.num <- sapply(DF, is.numeric)
is.num <- sapply(df_convertido, is.numeric)
df_convertido[is.num] <- lapply(df_convertido[is.num], round, 8)
View(df_convertido)
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr", "jsonlite","lubridate",
"lattice","moments","matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
json_data_1 <- jsonlite::fromJSON(txt='datos/resultados.json')
json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
flatten=T, simplifyVector = FALSE)
# datos['ciclo_4'][0]['datos']['RedboodexMoM_USA_A_2018-05-30_12:55:00']['df_serie_p']
parsed <- jsonlite::parse_json(json_data_1)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_convertido <- data.frame(matrix(unlist(df), nrow=31, byrow=T),stringsAsFactors=FALSE)
is.num <- sapply(df_convertido, is.numeric)
df_convertido[is.num] <- lapply(df_convertido[is.num], round, 8)
View(df_convertido)
View(df_convertido)
json_data_1 <- jsonlite::fromJSON(txt='datos/mid_oc_30_1_3000_20.json')
# json_data_2 <- jsonlite::fromJSON(txt='datos/resultados.json',
#                                   flatten=T, simplifyVector = FALSE)
# datos['ciclo_4'][0]['datos']['RedboodexMoM_USA_A_2018-05-30_12:55:00']['df_serie_p']
parsed <- jsonlite::parse_json(json_data_1)
#
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_convertido <- data.frame(matrix(unlist(df), nrow=31, byrow=T),stringsAsFactors=FALSE)
is.num <- sapply(df_convertido, is.numeric)
df_convertido[is.num] <- lapply(df_convertido[is.num], round, 8)
View(df_convertido)
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_convertido <- data.frame(matrix(unlist(df), nrow=31, byrow=T))
View(df_convertido)
df_convertido <- data.frame(matrix(unlist(df), nrow=30, byrow=T))
217/7
df_convertido <- data.frame(matrix(unlist(df), nrow=31, bycol=T))
df_convertido <- data.frame(matrix(unlist(df), nrow=31, byrow=F))
View(df_convertido)
View(df_convertido)
View(df_convertido)
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_data <- data.frame(matrix(unlist(df), nrow=31, byrow=F))
df_data <- df_data[, c(X5, X1, X2, X3, X4, X5, X6)]
json_data_1 <- jsonlite::fromJSON(txt='datos/mid_oc_30_1_3000_20.json')
parsed <- jsonlite::parse_json(json_data_1)
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_data <- data.frame(matrix(unlist(df), nrow=31, byrow=F))
df_data <- df_data[, c(X5, X1, X2, X3, X4, X6, X7)]
View(df_data)
df_data <- df_data[, c('X5', 'X1', 'X2', 'X3', 'X4', 'X6', 'X7')]
View(df_data)
df
View(df_data)
json_data_1 <- jsonlite::fromJSON(txt='datos/mid_oc_30_1_3000_20.json')
parsed <- jsonlite::parse_json(json_data_1)
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_data <- data.frame(matrix(unlist(df), nrow=31, byrow=F))
df_data <- df_data[, c('X5', 'X4', 'X2', 'X3', 'X1', 'X6', 'X7')]
colnames(df)
names(df)
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_data <- data.frame(matrix(unlist(df), nrow=31, byrow=F))
colnames(df_data) <- names(df)
df_data <- df_data[, c('timestamp', 'open', 'high', 'low', 'close', 'mid_oc', 'mid_hl')]
# Chunk 2: leer_tablas
t_tabla_1 <- read.csv('tablas/t_tabla_1.csv', fill = TRUE)
t_tabla_1 <- t_tabla_1[, c('id', 'pais', 'ocurrencias')]
# Chunk 3: leer_tablas
json_data_1 <- jsonlite::fromJSON(txt='datos/mid_oc_30_1_3000_20.json')
parsed <- jsonlite::parse_json(json_data_1)
# Chunk 4: leer_json
df <- jsonlite::fromJSON(parsed$ciclo_4[[4]]$datos$`Markitposite_USA_D_2016-01-26_14:45:00`$df_serie_p[1])
df_data <- data.frame(matrix(unlist(df), nrow=31, byrow=F))
colnames(df_data) <- names(df)
df_data <- df_data[, c('timestamp', 'open', 'high', 'low', 'close', 'mid_oc', 'mid_hl')]
# Chunk 5: pruebas_estadisticas
df_data$mid_oc
acf(df_data$mid_oc)
pacf(df_data$mid_oc)
r_pacf <- pacf(df_data$mid_oc)
r_acf  <- acf(df_data$mid_oc)
r_acf$lag
r_acf$acf
r_acf$n.used
r_acf$lag
r_acf$acf
r_acf$series
r_acf$snames
r_acf$acf
datos <- df_data$mid_oc
r_pacf <- pacf(datos)
d <- ADFTestedSeries(datos,5,0.90)[1,3]
adf.test(datos,5,0.90)
d <- adf.test(x = datos, alternative = 'stationary', k = 0)
d$p.value
x <- rnorm(1000) # no unit-root
adf.test(x)
x <- rnorm(1000, alternative = 'stationary', k = 0) # no unit-root
adf.test(x)
adf.test(x = datos)
r_garch <- garch(datos, order = c(1,1))
plot(r_garch.arch)
r_garch <- garch(datos, order = c(1,1))
plot(r_garch.arch)
r_garch <- garch(x=datos, order = c(1,1),)
r_garch
plot(r_garch.arch)
plot(r_garch)
r_garch <- garch(x=datos, order = c(1,1))
plot(r_garch)
plot(r_garch.garch)
plot(r_garch)
summary(r_garch)
predict(r_garch, 1)
# ajuste de modelo
predict(datos, 1)
r_garch.predict
r_garch$fitted.values
r_garch$order
# datos para pruebas
datos <- df_data$mid_oc
# prueba de raiz unitaria
r_d <- adf.test(x = datos) # p.value > 0.05 == unit-root
# prueba fac
r_acf  <- acf(df_data$mid_oc)
# prueba facp
r_pacf <- pacf(datos)
# prueba heterocedasticidad
r_garch <- garch(x=datos, order = c(1,1))
summary(r_garch)
predict(r_garch, 2)
predict(garch(x=datos, order = c(1,1)), 2)
