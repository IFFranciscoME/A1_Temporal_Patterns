# Remove objects from enviornment
rm(list=ls())
# load libraries
library(olsrr)    # OLS statistical tools
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
# Set working directory to source file location
setwd("~/github/MSC/IDI-III/A1_Plateau_Calibration/")
source(paste0(getwd(), '/codes/visualizations/visualization.r'))
# -- ------------------------------------------------------------------------ Leer y preparar los datos -- #
fr_read_data <- function(r_file) {
#' @title fr_read_data - Documentation
#'
#' @description Function to read and clean a dataframe provided from
#' reading a csv file with the candidate features
#'
#' @param r_file char. filename with the data generated by feature engineering process
#'
#' @return Returns the same dataframe with all character columns as character and parameter
#' columns as numeric
# data file
file <- paste0("codes/data/features/", r_file)
# Load data
data <- read.csv(file, header = TRUE)
# do not include timestamp and co_d columns in dataframe
data_m <- data[, !names(data) %in% c("timestamp", "co_d")]
return (data_m)
}
# despues de leer features
data_f <- fr_read_data(r_file='data_features.csv')
# tabla de nombres de variables y etiquetas
nombres <- as.character(colnames(data_f))
t_coeficientes <- data.frame(coef=c(nombres),
var=c('y', paste0('x_', seq(1, length(colnames(data_f))-1, 1))),
stringsAsFactors = FALSE)
# colnames(data_f) <-  t_coeficientes$var
# -- ----------------------------------------------------------------------------- Analisis de variables -- #
# matriz de correlaciones
correlaciones <- cor(data_f)
# datos para grafica de correlacion con variable dependiente
datos <- data.frame(features=colnames(data_f)[2:length(data_f)],
correlaciones=cor(data_f)[2:length(data_f), 1],
signo=ifelse(data_f[2:length(data_f), 1] < 0, -1, 1))
# Remove objects from enviornment
rm(list=ls())
# load libraries
library(olsrr)    # OLS statistical tools
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
# Set working directory to source file location
setwd("~/github/MSC/IDI-III/A1_Plateau_Calibration/")
source(paste0(getwd(), '/codes/visualizations/visualization.r'))
# -- ------------------------------------------------------------------------ Leer y preparar los datos -- #
fr_read_data <- function(r_file) {
#' @title fr_read_data - Documentation
#'
#' @description Function to read and clean a dataframe provided from
#' reading a csv file with the candidate features
#'
#' @param r_file char. filename with the data generated by feature engineering process
#'
#' @return Returns the same dataframe with all character columns as character and parameter
#' columns as numeric
# data file
file <- paste0("codes/data/features/", r_file)
# Load data
data <- read.csv(file, header = TRUE)
# do not include timestamp and co_d columns in dataframe
data_m <- data[, !names(data) %in% c("timestamp", "co_d")]
return (data_m)
}
# despues de leer features
data_f <- fr_read_data(r_file='data_features.csv')
# Remove objects from enviornment
rm(list=ls())
# load libraries
library(olsrr)    # OLS statistical tools
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
# Set working directory to source file location
setwd("~/github/MSC/IDI-III/A1_Plateau_Calibration/")
source(paste0(getwd(), '/codes/visualizations/visualization.r'))
# -- ------------------------------------------------------------------------ Leer y preparar los datos -- #
fr_read_data <- function(r_file) {
#' @title fr_read_data - Documentation
#'
#' @description Function to read and clean a dataframe provided from
#' reading a csv file with the candidate features
#'
#' @param r_file char. filename with the data generated by feature engineering process
#'
#' @return Returns the same dataframe with all character columns as character and parameter
#' columns as numeric
# data file
file <- paste0("codes/data/features/", r_file)
# Load data
data <- read.csv(file, header = TRUE)
# do not include timestamp and co_d columns in dataframe
data_m <- data[, !names(data) %in% c("timestamp", "co_d")]
return (data_m)
}
# despues de leer features
data_f <- fr_read_data(r_file='data_features.csv')
getwd()
# --------------------------------------------------------------------------------------------------------- #
# -- project: Plateau, a Calibration Technique for Trading Systems Optimization                          -- #
# -- File: rmodel.r | Model fit with R                                                                   -- #
# -- author: IFFranciscoME                                                                               -- #
# -- license: GPL-3.0 License                                                                            -- #
# -- repository: https://github.com/IFFranciscoME/A1_Plateau_Calibration                                 -- #
# -- --------------------------------------------------------------------------------------------------- -- #
# Remove objects from enviornment
rm(list=ls())
# load libraries
library(olsrr)    # OLS statistical tools
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
# Set working directory to source file location
setwd("~/github/MSC/IDI-III/github/A1_Plateau_Calibration/")
source(paste0(getwd(), '/codes/visualizations/visualization.r'))
# -- ------------------------------------------------------------------------ Leer y preparar los datos -- #
fr_read_data <- function(r_file) {
#' @title fr_read_data - Documentation
#'
#' @description Function to read and clean a dataframe provided from
#' reading a csv file with the candidate features
#'
#' @param r_file char. filename with the data generated by feature engineering process
#'
#' @return Returns the same dataframe with all character columns as character and parameter
#' columns as numeric
# data file
file <- paste0("codes/data/features/", r_file)
# Load data
data <- read.csv(file, header = TRUE)
# do not include timestamp and co_d columns in dataframe
data_m <- data[, !names(data) %in% c("timestamp", "co_d")]
return (data_m)
}
# despues de leer features
data_f <- fr_read_data(r_file='data_features.csv')
# --------------------------------------------------------------------------------------------------------- #
# -- project: Plateau, a Calibration Technique for Trading Systems Optimization                          -- #
# -- File: rmodel.r | Model fit with R                                                                   -- #
# -- author: IFFranciscoME                                                                               -- #
# -- license: GPL-3.0 License                                                                            -- #
# -- repository: https://github.com/IFFranciscoME/A1_Plateau_Calibration                                 -- #
# -- --------------------------------------------------------------------------------------------------- -- #
# Remove objects from enviornment
rm(list=ls())
# load libraries
library(olsrr)    # OLS statistical tools
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
# Set working directory to source file location
setwd("~/github/MSC/IDI-III/github/A1_Plateau_Calibration/")
source(paste0(getwd(), '/codes/visualizations/visualization.r'))
# -- ------------------------------------------------------------------------ Leer y preparar los datos -- #
fr_read_data <- function(r_file) {
#' @title fr_read_data - Documentation
#'
#' @description Function to read and clean a dataframe provided from
#' reading a csv file with the candidate features
#'
#' @param r_file char. filename with the data generated by feature engineering process
#'
#' @return Returns the same dataframe with all character columns as character and parameter
#' columns as numeric
# data file
file <- paste0("codes/data/features/", r_file)
# Load data
data <- read.csv(file, header = TRUE)
# do not include timestamp and co_d columns in dataframe
data_m <- data[, !names(data) %in% c("timestamp", "co_d")]
return (data_m)
}
# despues de leer features
data_f <- fr_read_data(r_file='data_features.csv')
setwd("~/github/MSC/IDI-III/github/A1_Plateau_Calibration/")
source(paste0(getwd(), '/codes/visualizations/visualization.r'))
setwd("~/github/MSC/IDI-III/github/A1_Plateau_Calibration/")
# --------------------------------------------------------------------------------------------------------- #
# -- project: Plateau, a Calibration Technique for Trading Systems Optimization                          -- #
# -- File: rmodel.r | Model fit with R                                                                   -- #
# -- author: IFFranciscoME                                                                               -- #
# -- license: GPL-3.0 License                                                                            -- #
# -- repository: https://github.com/IFFranciscoME/A1_Plateau_Calibration                                 -- #
# -- --------------------------------------------------------------------------------------------------- -- #
# Remove objects from enviornment
rm(list=ls())
# load libraries
library(olsrr)    # OLS statistical tools
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
# Set working directory to source file location
setwd("~/Documents/MSC/IDI-III/github/A1_Plateau_Calibration/")
source(paste0(getwd(), '/codes/visualizations/visualization.r'))
# -- ------------------------------------------------------------------------ Leer y preparar los datos -- #
fr_read_data <- function(r_file) {
#' @title fr_read_data - Documentation
#'
#' @description Function to read and clean a dataframe provided from
#' reading a csv file with the candidate features
#'
#' @param r_file char. filename with the data generated by feature engineering process
#'
#' @return Returns the same dataframe with all character columns as character and parameter
#' columns as numeric
# data file
file <- paste0("codes/data/features/", r_file)
# Load data
data <- read.csv(file, header = TRUE)
# do not include timestamp and co_d columns in dataframe
data_m <- data[, !names(data) %in% c("timestamp", "co_d")]
return (data_m)
}
# despues de leer features
data_f <- fr_read_data(r_file='data_features.csv')
View(data_f)
# --------------------------------------------------------------------------------------------------------- #
# -- project: Plateau, a Calibration Technique for Trading Systems Optimization                          -- #
# -- File: rmodel.r | Model fit with R                                                                   -- #
# -- author: IFFranciscoME                                                                               -- #
# -- license: GPL-3.0 License                                                                            -- #
# -- repository: https://github.com/IFFranciscoME/A1_Plateau_Calibration                                 -- #
# -- --------------------------------------------------------------------------------------------------- -- #
# Remove objects from enviornment
rm(list=ls())
# load libraries
library(olsrr)    # OLS statistical tools
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
# Set working directory to source file location
setwd("~/Documents/MSC/IDI-III/github/A1_Plateau_Calibration/")
source(paste0(getwd(), '/codes/visualizations/visualization.r'))
# -- ------------------------------------------------------------------------ Leer y preparar los datos -- #
fr_read_data <- function(r_file) {
#' @title fr_read_data - Documentation
#'
#' @description Function to read and clean a dataframe provided from
#' reading a csv file with the candidate features
#'
#' @param r_file char. filename with the data generated by feature engineering process
#'
#' @return Returns the same dataframe with all character columns as character and parameter
#' columns as numeric
# data file
file <- paste0("codes/data/features/", r_file)
# Load data
data <- read.csv(file, header = TRUE)
# do not include timestamp and co_d columns in dataframe
data_m <- data[, !names(data) %in% c("timestamp", "co_d")]
return (data_m)
}
# despues de leer features
data_f <- fr_read_data(r_file='data_features.csv')
View(data_f)
# tabla de nombres de variables y etiquetas
nombres <- as.character(colnames(data_f))
t_coeficientes <- data.frame(coef=c(nombres),
var=c('y', paste0('x_', seq(1, length(colnames(data_f))-1, 1))),
stringsAsFactors = FALSE)
# colnames(data_f) <-  t_coeficientes$var
t_coeficientes
# matriz de correlaciones
correlaciones <- cor(data_f)
# datos para grafica de correlacion con variable dependiente
datos <- data.frame(features=colnames(data_f)[2:length(data_f)],
correlaciones=cor(data_f)[2:length(data_f), 1],
signo=ifelse(data_f[2:length(data_f), 1] < 0, -1, 1))
# plot de correlacion entre variables independientes y variable dependiente
triggers <- c(-0.25, 0.25)
vs_corr <- vr_corrplot(r_datos=datos, r_triggers=triggers)
vs_corr
# mapa de calor de correlaciones entre variables independientes
vs_mcorr <- ggCorHM(Data = correlaciones, Nombres = colnames(correlaciones), OrdType =  "Ordenado",
ColorLow = "sky blue", ColorHigh = "steel blue", ColorMid = "white", TamTxtCor = 2,
RndTxtCor = 1, ColTxtCor = "black")
vs_mcorr
# -- Remover Objetos de Environment
rm(list=ls())
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
install.packages("downloader")
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
install.packages("xlsx")
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts", "xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts", "xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts", "xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
library(knitr)
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts", "xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
library(knitr)
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts", "xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
options(scipen = 50)
# Establecer directorio de trabajo donde esta este scritp
# para cuando se hace "RUN" del codigo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# para cuando se hace "SOURCE" del codigo
# setwd(getSrcDirectory()[1])
# -- Remover Objetos de Environment
rm(list=ls())
# -- Instalar y/o cargar paquetes necesarios
pkg <- c("downloader", "dplyr", "fBasics","gridExtra", "ggplot2","httr","kableExtra", "jsonlite","lubridate",
"lattice","moments", "matrixStats", "plyr","plot3D", "reshape2","RCurl", "stats",
"scales", "tseries","XML","xts", "xtable", "zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
knit_hooks$set(inline = function(x) {
prettyNum(x, big.mark=",")
})
